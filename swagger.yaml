swagger: '2.0'
info:
  title: Algorithmics API
  version: "1.0.0"
# the domain of the service
host: http://ec2-184-72-112-237.compute-1.amazonaws.com
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
produces:
  - application/json
paths:
  /registration:
    post:
      summary: Registration
      tags:
        - User
      description: |
        The registration endpoint registers new user.
        
      parameters:
        - name: model
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserRegistrationModel'
      responses:
        200:
          description: Returns 'ok'
          schema:
            $ref: '#/definitions/Message'
        400:
          description: User with this email already exist
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
  /login:
    post:
      tags:
        - User
      description: |
        The login endpoint logins user
      parameters:
        - name: model
          in: body
          required: true
          schema: 
             $ref: '#/definitions/UserLoginModel'
      responses:
        200:
          description: Returns message 'ok'
          schema:
            $ref: '#/definitions/Message'
        400:
          schema:
            $ref: '#/definitions/Error'
          description: Invalid email or password
        default:
          description: Unexpected error
  /changeCredentials:
    post:
      summary: Changes Credentials
      description: Allows User to change his Credentials (such as Email and Password)
      parameters:
        - name: model
          in: body
          description: Only OldPassword is required
          schema: 
             $ref: '#/definitions/UserChangeCredentialsModel'
      tags:
        - User
      responses:
        200:
          description: Returns message 'ok'
          schema:
            $ref: '#/definitions/Message'
        400:
          description: Incorrect password or user with this email already exist
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Authorization has been denied for this request
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
      security: 
        - AlgorithmicsAuth: []
  /logOff:
    get:
      summary: Logs off
      description: Logs User off
      tags:
        - User
      responses:
        200:
          description: Returns message 'ok'
          schema:
            $ref: '#/definitions/Message'
        401:
          description: Authorization has been denied for this request
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
      security: 
       - AlgorithmicsAuth: []
  /addAttempt:
    post:
      summary: Adds attempt
      description: Adds attempt
      parameters:
        - name: model
          required: true
          in: body
          schema:
            $ref: '#/definitions/AddAttemptModel'
      tags:
        - Attempt
      responses:
        200:
          description: Returns message 'ok'
          schema:
            $ref: '#/definitions/Message'
        401:
          description: Authorization has been denied for this request
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
      security: 
        - AlgorithmicsAuth: []
  /getRating:
    get:
      summary: Return first 50 users and your highest and lowest possible position
      description: Return first 50 users and your highest and lowest possible position
      tags:
        - Rating
      responses:
        200:
          description: Return first 50 users and your highest and lowest possible position (types are long)
          schema:
            $ref: '#/definitions/GetRatingPositionModel'
        401:
          description: Authorization has been denied for this request
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
      security: 
          - AlgorithmicsAuth: []
securityDefinitions:
  AlgorithmicsAuth:
    type: basic
    description: Authentication using black magic
definitions:
  GetRatingPositionModel:
    type: object
    properties:
      HighestPosition:
        type: integer
      LowestPosition:
        type: integer
      Rating:
        $ref: '#/definitions/RatingArray'
  RatingModel:
    type: object
    properties:
      UserName:
        type: string
      StarsCount:
        type: integer
  RatingArray:
    type: array
    items:
      $ref: '#/definitions/RatingModel'
  UserChangeCredentialsModel:
    type: object
    properties:
      NewEmail:
        type: string
      OldPassword:
        type: string
      NewPassword:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  UserRegistrationModel:
    type: object
    properties:
      Email:
        type: string
      Password:
        type: string  
  UserLoginModel:
    type: object
    properties:
      Password:
        type: string
      Email:
        type: string
  AddAttemptModel:
    type: object
    properties:
      LevelName: 
        type: string
      Time: 
        type: integer
      Stars:
        type: integer
  Message:
    type: string
    description: 'Ok'